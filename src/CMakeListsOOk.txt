cmake_minimum_required(VERSION 3.16)
project(cutekeyboard VERSION 1.0 LANGUAGES C CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOMOC ON)
include(GNUInstallDirs)

find_package(QT NAMES Qt6 REQUIRED COMPONENTS Core)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Gui Qml Quick)

qt_add_qml_module(cutekeyboardplugin
    URI "cutekeyboardplugin"
    VERSION ${PROJECT_VERSION}
    PLUGIN_TARGET cutekeyboardplugin
)

target_sources(cutekeyboardplugin PRIVATE
    DeclarativeInputEngine.cpp DeclarativeInputEngine.h
    EnterKeyAction.cpp EnterKeyAction.hpp
    EnterKeyActionAttachedType.cpp EnterKeyActionAttachedType.hpp
    InputPanelIface.cpp InputPanelIface.hpp
    VirtualKeyboardInputContext.cpp VirtualKeyboardInputContext.h
    VirtualKeyboardInputContextPlugin.cpp VirtualKeyboardInputContextPlugin.h
)
target_link_libraries(cutekeyboardplugin PRIVATE
    Qt::Core
    Qt::Gui
    Qt::GuiPrivate
    Qt::Qml
    Qt::Quick
    Qt::QuickPrivate
)

# Resources:
set(resources_resource_files
    "icons/backspace.png"
    "icons/caps-lock-off.png"
    "icons/caps-lock-on.png"
    "icons/hide-arrow.png"
)



qt_add_resources(cutekeyboardplugin "resources"
    PREFIX
        "/"
    FILES
        ${resources_resource_files}
)

install(TARGETS cutekeyboardplugin
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    FRAMEWORK DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
